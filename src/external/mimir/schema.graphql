### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AgentUpdate implements Node {
  agentId: Int!
  body: String!
  createdAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  userId: Int!
}

type Answer implements Node {
  comment: String
  createdAt: Date!

  """Form Submission"""
  formSubmission: FormSubmission!
  formSubmissionId: Int!

  """Unique identifier for the resource"""
  id: Int!
  lastEditedByUserId: Int

  """Question"""
  question: Question!
  questionId: Int!
  updatedAt: Date!
  value: Int
}

type Assistant implements Node {
  """The Assistant's monthly budget in cents"""
  budget: Int
  closer: String!
  company: Company!
  department: Department
  departmentId: Int

  """Unique identifier for the resource"""
  id: Int!
  opener: String!

  """The Assistant's owner"""
  owner: Client!
  ownerId: Int!
  profile: Profile
  profileId: Int

  """Clients who belong to the assistant's team"""
  teamMembers: [AssistantTeamMember!]!

  """The Assistant's team name"""
  teamName: String
}

"""Role of a client relative to assistant"""
enum AssistantClientRole {
  admin
  collaborator
  owner
}

type AssistantTeamMember implements IClient & Node {
  """Account Directors for the Client"""
  accountDirectors: [User!]!
  assistantRole(assistantId: Int!): AssistantClientRole!

  """The assistants a client has access to"""
  assistants(companyId: Int): [Assistant!]!

  """A company (by id) a client has access to"""
  company(id: Int!): Company
  companyRole(companyId: Int, companySlug: String): CompanyRole!

  """Delivery Managers for the Client"""
  deliveryManagers: [User!]!

  """The first assistant a client has access to"""
  firstAssistant: Assistant

  """Unique identifier for the resource"""
  id: Int!

  """Client Resource Links"""
  oldProcesses: [OldProcess!]
  preference: String

  """The profile of a person (e.g. Agent, Client)."""
  profile: Profile
  profileId: Int
  role: AssistantClientRole!

  """Client credential tags"""
  tags: [Tag!]
  tagToClients: [TagToClient!]!

  """Relationships of Users to Clients"""
  usersToClientsAccess(roleIds: String!): [UsersToClientsAccess!]
}

type AssistantToClient {
  assistant: Assistant!
  assistantId: Int!
  client: Client!
  clientId: Int!
  role: AssistantClientRole!
}

type Balance {
  amount: Float!
  balance: Float!
  creditCreatedAt: String
  description: String
  eventDate: String!
  eventType: String
  id: Int!
  instanceId: Int
  invoice: StripeInvoice
  rate: Float
  recurring: Boolean
  stripeChargeId: String
  timeTracked: String
  type: String
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
BigInt can represent values between -(2^53) + 1 and 2^53 - 1. 
"""
scalar BigInt

"""Internal shift response type for multiple userIds"""
type BulkInternalShift {
  """Internal Shifts for user"""
  shifts: [InternalShift!]

  """Agent working shift"""
  user: User!
  userId: Int!
}

type CalendarEvent {
  end: Date!
  name: String
  start: Date!
}

type Card {
  brand: String!
  last4: String!
  name: String
  type: String!
}

"""Check in to agent shift"""
type CheckIn implements Node {
  createdAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  lateness: Int
  latenessReason: String

  """Parent Shift"""
  shift: InternalShift!
  shiftId: Int!
  timeIn: Date!
  updatedAt: Date!

  """Agent working shift"""
  user: User!
  userId: Int!
}

type Client implements IClient & Node {
  """Account Directors for the Client"""
  accountDirectors: [User!]!
  assistantRole(assistantId: Int!): AssistantClientRole!

  """The assistants a client has access to"""
  assistants(companyId: Int): [Assistant!]!

  """A company (by id) a client has access to"""
  company(id: Int!): Company
  companyRole(companyId: Int, companySlug: String): CompanyRole!

  """Delivery Managers for the Client"""
  deliveryManagers: [User!]!

  """The first assistant a client has access to"""
  firstAssistant: Assistant

  """Unique identifier for the resource"""
  id: Int!

  """Client Resource Links"""
  oldProcesses: [OldProcess!]
  preference: String

  """The profile of a person (e.g. Agent, Client)."""
  profile: Profile
  profileId: Int

  """Client credential tags"""
  tags: [Tag!]
  tagToClients: [TagToClient!]!

  """Relationships of Users to Clients"""
  usersToClientsAccess(roleIds: String!): [UsersToClientsAccess!]
}

type Comment implements Node {
  body: String!
  createdAt: Date!

  """Descriptor"""
  descriptor: Descriptor!
  descriptorId: Int!

  """Unique identifier for the resource"""
  id: Int!
  isWorkStatus: Boolean!
  message: Message!
  messageId: Int!

  """Stage"""
  stage: Stage!
  stageId: Int!

  """Status"""
  status: Status!
  statusId: Int!
  type: CommentType!
}

enum CommentType {
  general
  quote
}

type Commodity implements Node {
  defaultRate: Int!

  """Unique identifier for the resource"""
  id: Int!
  name: String!
  unit: String!
}

type Company implements Node {
  """Total balance without open quotes"""
  actualBalance(date: String!): Float!
  allowNegativeBalance: Boolean!

  """The assistants a company has access to"""
  assistants: [Assistant!]
  autoRecharge: Boolean!

  """Amount to charge client based on proposed quote"""
  autoRechargeAmount(
    """Is this an instance duplication?"""
    instanceDuplication: Boolean
    lineItemsAttributes: [LineItemAttributesInputType!]!
    quoteInstanceId: Int!
  ): Float

  """Maximum amount that a quote can be charged automatically (in cents)."""
  autoRechargeMaxAmount: Float!

  """Stripe subscription plan"""
  availablePlans(discountCode: String): [Plan!]!
  averageCsatScore: Float
  balance(date: String): Float!

  """Event of company balance history"""
  balanceHistory(from: String!, to: String!): [Balance!]!

  """Event of company balance history completed only"""
  balanceHistoryCompleted(from: String!, to: String!): [Balance!]!

  """Event of pending company balance history"""
  balanceHistoryPending(from: String!, to: String!): [Balance!]!

  """Total completed usage within a given time period"""
  completedUsage(from: String!, to: String!): Float
  consumingProcessRate: Float!

  """Company creation date"""
  createdAt: Date!

  """The CSM assigned to the Company."""
  csmUser: User
  csmUserId: Int

  """The delegations of all assistants in the company"""
  delegations(limit: Int, offset: Int, status: InstanceStatus, statusIds: [Int!]): [Instance!]

  """Number of delegations in company grouped by status"""
  delegationsCounts(from: String, to: String): DelegationCounts!

  """The delegations in progress for all assistants in the company"""
  delegationsInProgress: [Instance!]

  """Summary of deliverable counts"""
  deliverablesCounts: [DeliverablesCount!]!

  """Credit Expiration enabled for this Company"""
  expireCredits: Boolean!

  """Credits expiring within a given time period"""
  expiringCredits: [ExpiringCredit!]!
  externalInternal: ExternalInternal!
  fromEmailsBlacklist: [String]

  """Unique identifier for the resource"""
  id: Int!
  invites(used: Boolean!): [Invite!]!
  isPaidFor: Boolean!
  isSelfServed: Boolean!
  logoUrl: String

  """The members of the company (e.g. Owner and invited team members)."""
  members(limit: Int): [Client!]!
  name: String!
  offboarded: Boolean!

  """The owner of the company"""
  owner: Client!
  ownerId: Int!
  preference: String

  """Processes attached to this company"""
  processes: [Process!]
  processRate: Float!

  """Event of quote history of a delegation"""
  quotesForDelegation(instanceId: Int!): [Balance!]!
  slug: String!
  stripeCustomerId: String

  """Next subscription renewal date and amount"""
  subscription: Subscription
  tier: Tier!
  toEmailsBlacklist: [String]

  """Total usage within a given time period"""
  usage(from: String!, to: String!): Float
  weeklyUsage(from: String!, to: String!): [Usage!]!
}

"""Company Role"""
enum CompanyRole {
  admin
  collaborator
  owner
}

type CompanyToClient implements Node {
  company: Company!
  companyId: Int!

  """Unique identifier for the resource"""
  id: Int!
  owner: Client!
  ownerId: Int!
  role: CompanyRole!
}

type CompletedDelegation implements Node {
  createdAt: Date

  """Form Submission"""
  formSubmission: FormSubmission!
  formSubmissionId: Int

  """Unique identifier for the resource"""
  id: Int!

  """Instance"""
  instance: Instance!
  instanceId: Int
  meta: JSON

  """Process Run"""
  processRun: ProcessRun!
  processRunId: Int
  qaScore: Float
  updatedAt: Date

  """User"""
  user: User!
  userId: Int!
}

type Complexity implements Node {
  """Unique identifier for the resource"""
  id: Int!
  label: String!
  rank: Int!
}

type CostCode implements Node {
  category: String!
  code: String!
  description: String!

  """Unique identifier for the resource"""
  id: Int!
  internalTeam: String!
}

scalar Date

type DelegationCounts {
  all: Int
  awaitingClient: Int
  done: Int
  inProgress: Int
}

type Delegator {
  email: String
  isTeamMember: Boolean!
  name: String
}

type Deliverable implements Node {
  """Unique identifier for the resource"""
  id: Int!
  instanceId: Int!
  link: String!
  name: String!
  userId: Int!
}

type DeliverablesCount {
  count: Int!
  name: String!
}

type Department implements Node {
  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

type Descriptor implements Node {
  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

type DraftAgentInvoice implements Node {
  cycleRange: [Date!]!

  """Unique identifier for the resource"""
  id: Int!
  resultsBasedTotal: Int!
  status: DraftAgentInvoiceStatus
  timeBasedTotal: Int!
  timeEntries: [TimeEntry!]
  total: Int!
  user: User!
  userId: Int!
  xeroInvoice: XeroInvoice
  xeroInvoiceId: Int
}

"""Draft Agent Invoice Statuses"""
enum DraftAgentInvoiceStatus {
  approved
  drafted
}

"""ISO string of a duration"""
scalar Duration

type Email implements Node {
  BCC: [String!]
  body(allowUnsanitized: Boolean): String!
  CC: [String!]
  createdAt: Date!
  EK: String!
  files: String!
  filesCount: Int!
  from: String!

  """Unique identifier for the resource"""
  id: Int!
  message: Message!
  messageId: Int!
  recipient: String
  sanitizedBody: String!
  subject: String!
  to: [String!]
}

type ExpiringCredit {
  amount: Int!
  expireAt: Date!
}

"""Assistant External or Internal-ness"""
enum ExternalInternal {
  External
  Internal
}

input Filter {
  field: String
  name: String
  range: JSON
  values: [JSON]
}

type Form implements Node {
  createdAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  type: FormType!
}

type FormSubmission implements Node {
  """Answers"""
  answers: [Answer!]!
  createdAt: Date!

  """Form"""
  form: Form!
  formId: Int!

  """Unique identifier for the resource"""
  id: Int!

  """Instance"""
  instance: Instance!
  instanceId: Int!
  overallRating: Int
  passed: Boolean
  submitedByUserId: Int
  submittedAt: Date

  """Task Run"""
  taskRun: TaskRun
  taskRunId: Int
}

enum FormType {
  csat
  qa
  taskQa
}

"""Interface for Client"""
interface IClient {
  """Account Directors for the Client"""
  accountDirectors: [User!]!
  assistantRole(assistantId: Int!): AssistantClientRole!

  """The assistants a client has access to"""
  assistants(companyId: Int): [Assistant!]!

  """A company (by id) a client has access to"""
  company(id: Int!): Company
  companyRole(companyId: Int, companySlug: String): CompanyRole!

  """Delivery Managers for the Client"""
  deliveryManagers: [User!]!

  """The first assistant a client has access to"""
  firstAssistant: Assistant

  """Client Resource Links"""
  oldProcesses: [OldProcess!]
  preference: String

  """The profile of a person (e.g. Agent, Client)."""
  profile: Profile
  profileId: Int

  """Client credential tags"""
  tags: [Tag!]
  tagToClients: [TagToClient!]!

  """Relationships of Users to Clients"""
  usersToClientsAccess(roleIds: String!): [UsersToClientsAccess!]
}

type Instance implements Node {
  activeProcessRun: ProcessRun

  """Active Time Entries"""
  activeTimeEntries: [TimeEntry!]!

  """Agent who is assigned to the Instance."""
  assignee: User
  assigneeId: Int

  """The assistant that received the email"""
  assistant: Assistant!
  assistantId: Int!

  """benchmark as an iso string"""
  benchmark: Duration

  """benchmark as a float number of hours"""
  benchmarkHours: Float
  billingRate: Float

  """The client that delegated us the instance"""
  client: Client
  clientId: Int

  """Date of completion for done instances"""
  completedAt: Date
  complexity: Complexity
  complexityRank: Int
  cost: Float
  costCode: CostCode!
  costCodeId: Int!
  createdAt: Date!
  deadline: Date

  """Instance delegator"""
  delegator(companyId: Int!): Delegator

  """Deliverables"""
  deliverables: [Deliverable!]!
  description: String

  """Descriptor"""
  descriptor: Descriptor!
  descriptorId: Int!
  duplicatedFrom: Instance
  duplicatedFromId: Int
  duplicatedTo: [Instance!]
  duplicatedToIds: [Int!]!
  emailDraft: String
  ETA: Date
  form: Form
  formId: Int
  help: Boolean!

  """Unique identifier for the resource"""
  id: Int!

  """InstanceDraft"""
  instanceDraft: InstanceDraft
  instanceDraftId: Int
  isCurrentlyBeingTrackedIn: Boolean!
  looksLikeSpam: Boolean!

  """management benchmark as an iso string"""
  managementBenchmark: Duration

  """management benchmark as a float number of hours"""
  managementBenchmarkHours: Float
  name: String

  """Instructions for completing the Instance."""
  oldProcess: OldProcess
  oldProcessId: Int

  """sum of oldTask benchmarks as a float number of hours"""
  oldTaskBenchmarkHours: Float!
  oldTasks: [OldTask!]

  """Agent who is the owner of the Instance."""
  owner: User
  ownerId: Int
  qualification: Qualification
  qualificationId: Int

  """Instance quote"""
  quote: Quote
  quotedHours: Float
  rating: Int
  recurring: Boolean!
  recurringFrequency: String

  """The last 5 instances on the duplication relationships"""
  relatedInstances: [Instance!]

  """scoping benchmark as an iso string"""
  scopingBenchmark: Duration

  """scoping benchmark as a float number of hours"""
  scopingBenchmarkHours: Float

  """Stage"""
  stage: Stage!
  stageId: Int!

  """Status"""
  status: Status!
  statusId: Int!

  """Tags"""
  tags: [Tag!]
  tagToInstances: [TagToInstance!]!

  """sum of taskRun benchmarks as a float number of hours"""
  taskRunBenchmarkHours: Float!
  totalTimeTracked: BigInt!
  uid: String!
  unsnoozeAt: Date
  updatedAt: Date
}

type InstanceDraft implements Node {
  assistant: Assistant!
  assistantId: Int!
  client: Client!
  clientId: Int!
  company: Company!
  companyId: Int!
  createdAt: Date!
  deadline: Date

  """Unique identifier for the resource"""
  id: Int!
  instances: [Instance!]
  instanceTemplate: InstanceTemplate
  instanceTemplateId: Int
  instructions: String
  name: String
  requiresCredentials: Boolean!
  submittedAt: Date
  templateData: JSON
  updatedAt: Date!
}

type InstanceDraftSubmittedValue {
  instance: Instance!
  instanceDraft: InstanceDraft!
  process: Process
}

enum InstanceStatus {
  Done
  NotDone
}

type InstanceTemplate implements Node {
  blurb: String!
  createdAt: Date!
  description: String!

  """Unique identifier for the resource"""
  id: Int!
  imageUrl: String!
  instanceDrafts: [InstanceDraft!]
  name: String!
  process: Process

  """Category the process belongs to"""
  processCategory: Tag
  processCategoryTagId: Int
  processId: Int
  questions: [InstanceTemplateQuestion!]!
}

type InstanceTemplateQuestion {
  answers: [String!]
  description: String!
  id: String!
  name: String!
  question: String!
  required: Boolean
  type: String!
}

"""Time record for agent shift"""
type InternalShift implements Node {
  """Agent working shift"""
  agent: User!
  createdAt: Date!
  editedByUserId: Int
  endDate: Date!
  endTime: String!

  """Unique identifier for the resource"""
  id: Int!

  """Shift Owner"""
  owner: User

  """Parent Shift"""
  parent: InternalShift
  parentId: Int
  recurring: Boolean!
  recurringFrequency: String
  startDate: Date!
  startTime: String!
  timezone: String
  type: String!
  userId: Int!
}

type Invite {
  companyId: Int!
  expiredAt: Date!
  invitedClientEmail: String!
  inviterId: Int!
  isExistingClient: Boolean
  isExpiredToken: Boolean!
  used: Boolean!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LineItem implements Node {
  agentPaymentPerUnit: Int
  agentPaymentType: LineItemAgentPaymentType!
  amountInCents: Int!
  buffer: Float!
  centsPerOutput: Float
  commodity: Commodity!
  commodityId: Int!
  discount: Float!
  grossMargin: Float!
  hoursPerOutput: Float!

  """Unique identifier for the resource"""
  id: Int!

  """iso string of management time"""
  managementTimeDuration: Duration!
  outputsPerHour: Float
  quantity: Float!
  saasCostPerUnit: Int!

  """iso string of scoping time"""
  scopingTimeDuration: Duration!
  serviceMargin: Float!

  """iso string of time to one unit"""
  timeToOneUnit: Duration!
  type: String!
  unitCost: Float!
}

"""Line Item Agent Payment Type"""
enum LineItemAgentPaymentType {
  benchmark
  timetracked
  unit
}

input LineItemAttributesInputType {
  agentPaymentPerUnit: Int
  agentPaymentType: LineItemAgentPaymentType
  buffer: Float
  commodityId: Int
  discount: Float
  managementTimeDuration: String
  quantity: Float!
  saasCostPerUnit: Int
  scopingTimeDuration: String
  serviceMargin: Float
  timeToOneUnit: String
  type: LineItemType
}

"""Line Item Type"""
enum LineItemType {
  fixedAmount
  general
  scoping
}

type LoginException implements Node {
  createdAt: Date!
  createdByUserId: Int!

  """User that created the exception"""
  creator: User!
  endAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  note: String
  updatedAt: Date!

  """User"""
  user: User!
  userId: Int!
}

type Menus implements Node {
  createdAt: Date
  id: Int!
  name: String!
  updatedAt: Date
}

type MenuToTags implements Node {
  createdAt: Date
  id: Int!

  """Menu"""
  menu: Menus
  menuId: Int

  """Parent Tag"""
  parentTag: Tag
  parentTagId: Int
  updatedAt: Date
}

type Message implements Node {
  assistant: Assistant
  assistantId: Int
  direction: String!

  """Unique identifier for the resource"""
  id: Int!
  instances: [Instance!]
  user: User
  userId: Int
}

type Mutation {
  addCheckIn(shiftId: Int!, timeIn: String!, userId: Int!): CheckIn!
  addCheckInLatenessReason(id: Int!, latenessReason: String!): CheckIn!
  addClientToAssistant(assistantId: Int!, clientId: Int!, role: AssistantClientRole!): AssistantTeamMember!
  addCompanyEmailBlacklist(
    """The Instance Id"""
    instanceId: Int!
  ): Company!
  addCompanyToProcess(companyId: Int!, id: Int!): Process
  addDeliverable(instanceId: Int!, link: String!, name: String!, userId: Int!): Deliverable!
  addMenu(
    """The Menu name"""
    name: String!
  ): Menus!
  addMenuToTag(
    """The Menu id"""
    menuId: Int!

    """The Parent Tag id"""
    parentTagId: Int!
  ): MenuToTags!
  addPreset(
    """The Presets filters"""
    filters: [Filter]!

    """The Presets name"""
    name: String!
  ): Presets!
  addProcessToInstance(instanceId: Int!, processId: Int!): Instance
  addQuote(lineItemsAttributes: [LineItemAttributesInputType!]!, quoteAttributes: QuoteAttributesInputType!): Quote!
  addSimpleQuote(lineItemsAttributes: [LineItemAttributesInputType!]!, quoteAttributes: QuoteAttributesInputType!): Quote!
  addStepToProcess(insertStepAfterPosition: Int, insertTaskAfterPosition: Int, processId: Int!, stepTemplateId: Int!, taskId: Int): Step!
  addTagToClient(clientId: Int!, tagId: Int!): Client
  addTagToInstance(id: Int!, tagId: Int!): Instance!
  addTagToProcess(id: Int!, tagId: Int!): Process
  addTagToUser(id: Int!, tagId: Int!): User
  addTaskDeliverable(commodityId: Int!, quantityRequired: Int, taskId: Int!): TaskDeliverable
  addTaskRunDeliverable(commodityId: Int!, quantityRequired: Int, taskRunId: Int!): TaskRunDeliverable
  addWorkStatus(body: String!, descriptorId: Int!, instanceId: Int!, stageId: Int!, statusId: Int!, userId: Int!): Comment!
  archiveAllNotifications: Boolean
  archiveNotification(id: Int!): Notification!
  archiveTag(id: Int!): Int!
  autoCompleteStepGotos(id: Int!): Process
  batchifyTaskRun(id: Int!, numBatches: Int!): [TaskRun!]!
  changeProcessTagRank(newRank: Int!, processId: Int!, tagId: Int!): Process
  changeUserTagRank(newRank: Int!, tagId: Int!, userId: Int!): User
  completeTaskRun(id: Int!, status: TaskRunStatus!): TaskRun!
  completeTaskRunQa(id: Int!, rating: Int!): TaskRun!

  """Converts a simple process to complex"""
  convertSimpleProcessToComplex(id: Int!): Process
  createAssistantTeam(assistantEmail: String, assistantId: Int, assistantName: String, budget: Int!, clientIds: [Int!]!, companyId: Int!, departmentId: Int!, name: String!, ownerId: Int!): Assistant!
  createDepartment(name: String!): Department!
  createEmptyTask(benchmark: String, description: String, name: String!, position: Int, processId: Int!, qaBenchmark: String): Task
  createFormSubmission(formId: Int!, instanceId: Int!, taskRunId: Int): FormSubmission!
  createInstance(assistantId: Int!, clientId: Int, name: String, processId: Int, threadId: Int): Instance!
  createInstanceDraft(assistantId: Int, clientId: Int, companyId: Int!, deadline: String, instanceTemplateId: Int, instructions: String, name: String!, requiresCredentials: Boolean, templateData: String): InstanceDraft
  createLoginException(endDate: String!, note: String, userId: Int!): LoginException!
  createMapStep(processId: Int!): Step!
  createNotification(body: String!, title: String, type: NotificationType!, url: String): Notification!
  createOldTask(assigneeId: Int, benchmark: String, deadline: String, description: String, instanceId: Int!, name: String!, status: OldTaskStatus): OldTask
  createProcess(benchmark: String, companyId: Int, complexity: ProcessComplexity, description: String, name: String!, status: ProcessStatus): Process
  createRole(description: String, emailPreference: RoleEmailPreference, name: String!): Role!
  createShift(editedByUserId: Int, endTime: String!, parentId: Int, recurring: Boolean!, recurringFrequency: String, startDate: String!, startTime: String!, type: String!, userId: Int!): InternalShift
  createStep(allowRetry: Boolean, automationLevel: StepTemplateAutomationLevel, description: String, external: Boolean, meta: JSON, name: String!, position: Int, processId: Int!, stepTemplateId: Int!, synchronous: Boolean, taskId: Int): Step
  createStepFromInstructionStep(stepId: Int!, stepTemplateId: Int!): Step
  createStepFromStepTemplate(processId: Int!, stepTemplateId: Int!, taskId: Int): Step
  createStepGoTo(goFromStepId: Int!, goToStepId: Int!, ifBranch: Boolean, processId: Int!): StepGoTo
  createStepRun(automationLevel: StepTemplateAutomationLevel, description: String, name: String!, position: Int, processRunId: Int!, status: StepRunStatus, stepId: Int!, stepTemplateId: Int!, taskRunId: Int): StepRun
  createStepRunGoTo(goFromStepRunId: Int!, goToStepRunId: Int!, ifBranch: Boolean, processRunId: Int!): StepRunGoTo
  createStepTemplate(allowRetry: Boolean, automationLevel: StepTemplateAutomationLevel, description: String, external: Boolean, inputs: JSON, meta: JSON, name: String!, outputs: JSON, status: StepTemplateStatus, stepTemplateCategoryId: Int!, synchronous: Boolean, uid: String, upsert: Boolean): StepTemplate
  createStepTemplateCategory(description: String, name: String!): StepTemplateCategory
  createTag(color: String, label: String!, parentId: Int): Tag
  createTask(benchmark: String, description: String, name: String!, position: Int, processId: Int!, qaBenchmark: String, status: TaskStatus, stepIds: [Int!]!): Task
  createTaskRun(assigneeId: Int, benchmark: String, deadline: String, description: String, name: String!, processRunId: Int!, qaBenchmark: String, status: TaskRunStatus, taskId: Int): TaskRun
  createUsersToClientsAccess(clientId: Int!, roleId: Int!, userId: Int!): UsersToClientsAccess!
  createVariable(defaultValue: String, description: String, direction: VariableDirection!, internalId: Int, meta: JSON, name: String!, processId: Int!, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, stepId: Int!, type: VariableType, variableTemplateId: Int): Variable
  createVariableGoTo(fromField: String, goFromVariableId: Int!, goToVariableId: Int!, processId: Int!, toField: String): VariableGoTo
  createVariableTemplate(defaultValue: String, description: String, direction: VariableDirection!, fieldTypeMapping: JSON, internalId: Int, meta: JSON, name: String!, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, stepTemplateId: Int!, type: VariableType!): VariableTemplate
  createVariableValue(defaultValue: String, description: String, direction: VariableDirection!, internalId: Int, meta: JSON, name: String!, processRunId: Int!, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, stepRunId: Int!, type: VariableType!, value: String, variableId: Int!): VariableValue
  createVariableValueGoTo(fromField: String, goFromVariableValueId: Int!, goToVariableValueId: Int!, processRunId: Int!, toField: String): VariableValueGoTo
  deleteAssistantTeam(assistantId: Int!): Assistant!
  deleteDeliverable(id: Int!): Deliverable!
  deleteLoginException(id: Int!): LoginException!
  deleteMenu(
    """The Menu id"""
    id: Int!
  ): Menus!
  deleteMenuToTag(
    """The Menu id"""
    menuId: Int!

    """The Parent Tag id"""
    parentTagId: Int!
  ): MenuToTags!
  deleteOldProcess(clientId: Int!, id: Int!): Client!
  deleteOldTask(id: Int!): Boolean
  deletePreset(
    """The Preset id"""
    id: Int!
  ): Presets!
  deleteProcess(id: Int!): Boolean!
  deleteShift(id: Int!, startDate: String): InternalShift
  deleteStep(id: Int!): Boolean!
  deleteStepGoTo(id: Int!): Boolean!
  deleteStepRun(id: Int!): Boolean!
  deleteStepRunGoTo(id: Int!): Boolean!
  deleteStepTemplate(id: Int!): Boolean!
  deleteStepTemplateCategory(id: Int!): Boolean!
  deleteTask(id: Int!): Boolean
  deleteTaskRun(id: Int!): Boolean
  deleteUsersToClientsAccess(id: Int!): UsersToClientsAccess!
  deleteVariable(id: Int!): Boolean!
  deleteVariableGoTo(id: Int!): VariableGoTo
  deleteVariableTemplate(id: Int!): VariableTemplate
  deleteVariableValue(id: Int!): Boolean!
  deleteVariableValueGoTo(id: Int!): Boolean!
  draftAgentInvoiceToXero(id: Int!): DraftAgentInvoice!
  duplicateInstance(batchifyTask: Boolean, deliverables: Boolean, id: Int!, instanceName: String, maintainPreviousQuote: Boolean!, newDeadline: String, operatorBenchmarks: Boolean, qaBenchmarks: Boolean, taskAssignees: Boolean, workStatus: Boolean): Instance
  duplicateOldTask(id: Int!, name: String): OldTask!
  duplicateProcess(id: Int!): Process
  duplicateStep(id: Int!): Step!
  duplicateStepRun(id: Int!): StepRun!
  duplicateStepTemplate(id: Int!): StepTemplate!
  duplicateTaskRun(id: Int!, name: String): TaskRun!
  duplicateVariable(id: Int!): Variable!
  duplicateVariableTemplate(id: Int!): VariableTemplate!
  editShift(editedByUserId: Int!, endTime: String, id: Int!, parentId: Int, recurring: Boolean, recurringFrequency: String, startDate: String!, startTime: String, type: String): InternalShift
  executeStepRun(id: Int!, manualOverride: Boolean): StepRun!
  markAllNotificationsAsRead: Boolean
  markNotificationAsRead(id: Int!): Notification!
  markStepRunAsDone(id: Int!): StepRun!
  markStepRunAsFailed(errorCode: String, errorMessage: String, id: Int!): StepRun!
  markStepRunAsQueued(id: Int!): StepRun!
  markStepRunAsRunning(id: Int!): StepRun!
  moveStepAndLinkGoTos(id: Int!, insertStepAfterPosition: Int, insertTaskAfterPosition: Int, taskId: Int): Step!
  onboardAgent(address: String, birthday: String, category: String, currency: String, email: String!, legalName: String, location: String, managerId: Int, pay: Int, paymentId: String, paymentMeta: String, paymentName: String, paymentPlatform: String, personalEmail: String, phone: String, team: String): User!
  publishMapTask(benchmark: String, description: String, id: Int!, name: String, outputVariableIds: [Int!], position: Int, qaBenchmark: String, status: TaskStatus): Task
  publishProcess(id: Int!): Process!
  removeAccessFromClient(id: Int!): Int
  removeClientFromAssistant(assistantId: Int!, clientId: Int!): AssistantTeamMember!
  removeClientFromCompany(clientEmail: String!, companyId: Int!): Client
  removeCompanyFromProcess(companyId: Int!, id: Int!): Process
  removeInstanceDraft(id: Int!): InstanceDraft!
  removeProcessFromInstance(instanceId: Int!): Instance!
  removeTagFromClient(clientId: Int!, tagId: Int!): Client
  removeTagFromInstance(id: Int!, tagId: Int!): Instance!
  removeTagFromProcess(id: Int!, tagId: Int!): Process
  removeTagFromUser(id: Int!, tagId: Int!): User
  removeTaskDeliverable(taskDeliverableId: Int!): Boolean
  removeTaskRunDeliverable(taskRunDeliverableId: Int!): Boolean
  reorderStep(id: Int!, insertStepAfterPosition: Int!, processId: Int!): Process!
  reorderStepRun(id: Int!, insertStepRunAfterPosition: Int!, processRunId: Int!): Boolean!
  reorderTask(id: Int!, insertTaskAfterPosition: Int, processId: Int!): Boolean!
  reorderTaskRun(id: Int!, positionBeforeTaskRun: Int!, processRunId: Int!): Boolean!
  setAssistantBudget(
    """The Assistant's monthly budget in cents"""
    budget: Int!
    id: Int!
  ): Assistant!
  setAssistantDepartment(departmentId: Int!, id: Int!): Assistant!
  setAssistantTeamName(
    id: Int!

    """The Assistant's team name"""
    name: String!
  ): Assistant!
  setCategoryForProcess(id: Int!, processCategoryTagId: Int): Process

  """Sets the associated companies for the given process"""
  setCompaniesForProcess(companyIds: [Int!]!, id: Int!): Process

  """Sets the associated tags for the given process"""
  setTagsForProcess(id: Int!, tagIds: [Int!]!, tagType: ProcessTagType!): Process

  """Sets the associated team tags for the given process"""
  setTeamTagsForProcess(id: Int!, teamTagIds: [Int!]!): Process
  splitStep(id: Int!, step1Instructions: String!, step2Instructions: String!): Step!

  """start time tracking"""
  startTracking(instanceId: Int!, oldTaskId: Int, taskRunId: Int, type: TimeEntryType): TimeEntry!

  """stop time tracking"""
  stopTracking(instanceId: Int!): TimeEntry!
  submitForm(id: Int!, overallRating: Int!, taskRunId: Int): FormSubmission!
  submitInstanceDraft(id: Int!): InstanceDraftSubmittedValue!
  transferAssistantOwnership(assistantId: Int!, clientId: Int!): AssistantTeamMember!
  updateAfterCallback(errorCode: String, errorMessage: String, id: Int!, status: StepRunStatus!): StepRun!
  updateAgent(address: String, birthday: String, category: String, currency: String, id: Int!, legalName: String, location: String, locationPlusCode: String, managerId: Int, pay: Int, paymentId: String, paymentMeta: String, paymentName: String, paymentPlatform: String, phone: String, team: String, timezone: String, workspaceComputerName: String, workspaceComputerRegion: String): User!
  updateAnswerComment(comment: String!, formSubmissionId: Int, questionId: Int!): Answer!
  updateAnswerValueForQuestion(formSubmissionId: Int, questionId: Int!, value: Int!): Answer!
  updateClient(id: Int!, preference: String): Client
  updateCompany(autoRecharge: Boolean, id: Int!, tier: String): Company
  updateCredentialStatus(clientId: Int!, credentialStatus: String!, tagId: Int!): Client
  updateDeliverable(id: Int!, link: String, name: String): Deliverable
  updateDraftAgentInvoice(id: Int!, status: DraftAgentInvoiceStatus): DraftAgentInvoice!
  updateInstanceAssignee(assigneeId: Int!, id: Int!): Instance!
  updateInstanceBenchmark(benchmark: String!, id: Int!): Instance!
  updateInstanceComplexity(complexityRank: Int!, id: Int!): Instance!
  updateInstanceDeadline(deadline: String!, id: Int!): Instance!
  updateInstanceDescription(description: String!, id: Int!): Instance!
  updateInstanceDraft(clientId: Int, deadline: String, id: Int!, instanceTemplateId: Int, instructions: String, name: String, requiresCredentials: Boolean, templateData: String): InstanceDraft!
  updateInstanceEmailDraft(emailDraft: String!, id: Int!): Instance!
  updateInstanceHelp(help: Boolean!, id: Int!): Instance!
  updateInstanceName(id: Int!, name: String!): Instance!
  updateInstanceOldProcess(id: Int!, oldProcessId: Int!): Instance!
  updateInstanceOwner(id: Int!, ownerId: Int!): Instance!
  updateInstanceRating(id: Int!, rating: Int!): Instance!
  updateInstanceRecurring(id: Int!, recurring: Boolean, recurringFrequency: String): Instance!
  updateInstanceStageStatusDescriptor(descriptorId: Int, id: Int!, stageId: Int, statusId: Int): Instance!
  updateInstanceUnsnoozeAt(id: Int!, unsnoozeAt: String!): Instance!
  updateOldTask(assigneeId: Int, deadline: String, description: String, id: Int!, instanceId: Int!, name: String, status: OldTaskStatus): OldTask!
  updateOldTaskBenchmark(benchmark: String!, id: Int!): OldTask!
  updatePreset(
    """The Presets filters"""
    filters: [Filter]

    """The Preset id"""
    id: Int!

    """The Preset name"""
    name: String!
  ): Presets!
  updateProcess(benchmark: Duration, companyId: Int, complexity: ProcessComplexity, description: String, id: Int!, name: String): Process
  updateProfile(email: String!, name: String, pictureUrl: String): Profile!
  updateRole(description: String, emailPreference: RoleEmailPreference, id: Int!, name: String): Role!
  updateStep(allowRetry: Boolean, automationLevel: StepTemplateAutomationLevel, description: String, external: Boolean, id: Int!, meta: JSON, name: String, position: Int, processId: Int, synchronous: Boolean, taskId: Int): Step
  updateStepGoTo(goFromStepId: Int, goToStepId: Int, id: Int!, ifBranch: Boolean): StepGoTo
  updateStepRun(allowRetry: Boolean, automationLevel: String, description: String, external: Boolean, id: Int!, instanceId: Int, name: String, position: Int, status: StepRunStatus, stepId: Int, stepTemplateId: Int, taskRunId: Int): StepRun
  updateStepTemplate(allowRetry: Boolean, automationLevel: String, description: String, external: Boolean, id: Int!, meta: JSON, name: String, status: StepTemplateStatus, stepTemplateCategoryId: Int!, synchronous: Boolean): StepTemplate
  updateStepTemplateCategory(description: String, id: Int!, name: String): StepTemplateCategory
  updateTag(color: String, id: Int!, label: String, parentId: Int): Tag
  updateTask(benchmark: String, description: String, id: Int!, name: String, position: Int, processId: Int, qaBenchmark: String, status: TaskStatus, taskId: Int): Task
  updateTaskDeliverable(commodityId: Int, quantityRequired: Int, taskDeliverableId: Int!): TaskDeliverable
  updateTaskRun(deadline: String, description: String, id: Int!, name: String, status: TaskRunStatus, taskId: Int): TaskRun!
  updateTaskRunAssignee(assigneeId: Int!, id: Int!): TaskRun!
  updateTaskRunBenchmark(benchmark: String!, id: Int!, isQa: Boolean!): TaskRun!
  updateTaskRunDeliverable(commodityId: Int, quantityApproved: Int, quantityCompleted: Int, quantityRequired: Int, taskRunDeliverableId: Int!): TaskRunDeliverable
  updateTaskRunMapInputVariableValueId(id: Int!, mapInputVariableValueId: Int!): TaskRun!
  updateTaskRunQAAssignee(id: Int!, qaAssigneeId: Int!): TaskRun!
  updateUsersToClientsAccess(id: Int!, roleId: Int!): UsersToClientsAccess!
  updateVariable(defaultValue: String, description: String, direction: VariableDirection, id: Int!, internalId: Int, meta: JSON, name: String, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, stepId: Int, type: VariableType, variableTemplateId: Int): Variable
  updateVariableGoTo(fromField: String, goFromVariableId: Int, goToVariableId: Int, id: Int!, toField: String): VariableGoTo
  updateVariableSchemaFromCSV(csvFileUrl: String!, id: Int!): Variable!
  updateVariableSchemaFromGoogleSheet(googleSheetUrl: String!, id: Int!, range: String, tabName: String!): Variable!
  updateVariableTemplate(defaultValue: String, description: String, direction: VariableDirection, fieldTypeMapping: JSON, id: Int!, internalId: Int, meta: JSON, name: String, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, type: VariableType): VariableTemplate
  updateVariableTemplateSchemaFromCSV(csvFileUrl: String!, id: Int!): VariableTemplate!
  updateVariableTemplateSchemaFromGoogleSheet(googleSheetUrl: String!, id: Int!, range: String, tabName: String!): VariableTemplate!
  updateVariableValue(defaultValue: String, description: String, direction: VariableDirection, id: Int!, meta: JSON, name: String, required: Boolean, sampleData: JSON, schema: JSON, stageId: Int, stepRunId: Int, type: VariableType, value: String, variableId: Int): VariableValue
  updateVariableValueGoTo(fromField: String, goFromVariableValueId: Int, goToVariableValueId: Int, id: Int!, toField: String): VariableValueGoTo
  upsertOldProcess(body: String, clientId: Int!, id: Int, name: String): Client!
}

interface Node {
  """Unique identifier for the resource"""
  id: Int!
}

type Notification implements Node {
  archived: Boolean!
  body: String!
  createdAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  read: Boolean!
  title: String!
  type: NotificationType!
  url: String!

  """User for whom this Notification was written."""
  user: User!
  userId: Int!
}

enum NotificationType {
  alert
  flash
  info
  push
}

type OldProcess implements Node {
  body: String

  """Client for whom this Process was written."""
  client: Client
  clientId: Int

  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

"""Deprecated"""
type OldTask implements Node {
  """Agent who is assigned to this oldTask."""
  assignee: User
  assigneeId: Int

  """benchmark as an iso string"""
  benchmark: Duration

  """benchmark as a float number of hours"""
  benchmarkHours: Float
  createdAt: Date!
  deadline: Date
  description(sanitize: Boolean): String
  duplicatedFrom: OldTask
  duplicatedFromId: Int
  duplicatedTo: [OldTask!]

  """Unique identifier for the resource"""
  id: Int!
  instance: Instance!
  instanceId: Int!
  isCurrentlyBeingTrackedIn: Boolean!
  name: String!
  qaComplete: Boolean!
  qaPass: Boolean!
  status: OldTaskStatus!
  timeEntries: [TimeEntry!]
  totalTimeTracked: BigInt!
}

enum OldTaskStatus {
  done
  operating
  pending
  qa
}

type Plan {
  description: String
  hours: Float!
  imageUrl: String
  intervalCount: Int
  monthlyAmount: Float!
  name: String!
  planId: String!
  rate: Float!
}

type Presets implements Node {
  createdAt: Date!
  filters: JSON!

  """Unique identifier for the resource"""
  id: Int!
  name: String!
  updatedAt: Date!

  """User"""
  user: User!
  userId: Int!
}

type Process implements Node {
  """benchmark as an iso string"""
  benchmark: Duration

  """benchmark as a float number of hours"""
  benchmarkHours: Float

  """Companies who are attached to this process"""
  companies: [Company!]
  complexity: ProcessComplexity!
  description: String
  duplicatedFrom: Process
  duplicatedFromId: Int
  duplicatedTo: [Process!]!

  """Unique identifier for the resource"""
  id: Int!
  instances: [Instance!]
  name: String!

  """Category the process belongs to"""
  processCategory: Tag

  """Executions of this Process"""
  processRuns: [ProcessRun!]!

  """Skills the process is tagged with"""
  skillTags: [Tag!]

  """Standard Processes the process is tagged with"""
  standardProcessesTags: [Tag!]
  status: ProcessStatus!

  """Steps in the process"""
  steps: [Step!]!

  """Tasks in the process"""
  tasks: [Task!]!

  """Teams the process is tagged with"""
  teamTags: [Tag!]

  """Tools the process is tagged with"""
  toolTags: [Tag!]
  uid: String!

  """Variables in the process"""
  variables: [Variable!]!
}

enum ProcessComplexity {
  complex
  simple
}

type ProcessRun implements Node {
  createdAt: Date!
  duplicatedFrom: ProcessRun
  duplicatedFromId: Int
  duplicatedTo: [ProcessRun!]

  """Unique identifier for the resource"""
  id: Int!
  instance: Instance!
  instanceId: Int!
  process: Process!
  processId: Int!
  stepRuns: [StepRun!]
  taskRuns: [TaskRun!]
  uid: String!
  updatedAt: Date!
  variableValues: [VariableValue!]
}

enum ProcessStatus {
  draft
  hidden
  published
}

enum ProcessTagType {
  skill
  standardProcesses
  team
  tool
}

type Profile implements Node {
  address: String
  birthday: Date
  email: String!

  """Unique identifier for the resource"""
  id: Int!
  legalName: String
  location: String
  name: String
  personalEmail: String
  phone: String
  pictureUrl: String
  title: String
}

type Qualification implements Node {
  domain: String!

  """Unique identifier for the resource"""
  id: Int!
}

type Query {
  absences(bustCache: Boolean, endDate: String!, parentId: Int!, startDate: String!): [InternalShift!]
  activeTimeEntries(instanceId: Int!): [TimeEntry!]!
  admins: [User!]!
  agentUpdates(agentId: Int!): [AgentUpdate!]!
  allCompletedDelegations(userId: Int!): [CompletedDelegation!]
  allUsersToClientsAccountDirectors: [UsersToClientsAccess!]!
  allUsersToClientsDeliveryManagers: [UsersToClientsAccess!]!
  assistant(id: Int!): Assistant
  assistants(companyId: Int): [Assistant!]!

  """Indirect labor costs as a percentage of direct labor costs"""
  averageAgentIndirectLaborCost: Float!
  averageAgentRate: Float!

  """Percentage of average trasaction, dm and software costs"""
  averageIndirectCost: Float!
  bulkInternalShifts(bustCache: Boolean, endDate: String!, startDate: String!, userIds: [Int!]!): [BulkInternalShift!]
  checkIn(bustCache: Boolean, dateIsoString: String!, shiftId: Int!): CheckIn
  checkProfileExistsByEmail(email: String!): Boolean!
  client(id: Int!): Client!
  clients: [Client!]!
  comment(bustCache: Boolean, id: Int!): Comment!
  comments(instanceId: Int): [Comment!]!
  commodities: [Commodity!]!
  companies: [Company!]!
  company(id: Int!): Company!
  companyBySlug(slug: String!): Company!
  complexities: [Complexity!]!
  cycleTimeEntries(cycleEnd: String!, cycleStart: String!, userId: Int!): [TimeEntry!]!
  deliverables(bustCache: Boolean, instanceId: Int!): [Deliverable!]!
  departments: [Department!]!
  descriptors: [Descriptor!]!
  draftAgentInvoice(bustCache: Boolean, cycleRange: [String!], id: Int, userId: Int): DraftAgentInvoice
  draftAgentInvoices(bustCache: Boolean, cycleRange: [String!]!): [DraftAgentInvoice!]!
  email(bustCache: Boolean, id: Int!): Email!

  """Just ids and createdAt, for performance"""
  emailIds(instanceId: Int!): [Email!]!
  emailSearch(query: String!): [Email!]!
  instance(bustCache: Boolean, id: Int!): Instance!
  instanceDraft(bustCache: Boolean, id: Int!): InstanceDraft
  instanceDrafts(bustCache: Boolean, companyId: Int!): [InstanceDraft!]!
  instanceForTracker(bustCache: Boolean, id: Int!): Instance!
  instances(bustCache: Boolean, filter: String, limit: Int, offset: Int, order: String): [Instance!]!
  instanceTemplate(id: Int!): InstanceTemplate
  instanceTemplates: [InstanceTemplate!]!
  invite(token: String!): Invite
  invites(companyId: Int!, used: Boolean!): [Invite!]!
  isValidTask(stepIds: [Int!]!): TaskValidation!
  latestQuoteComment(instanceId: Int!): Comment
  loggedInClient: Client!
  loggedInUser: User!
  loginException(
    """The exception Id"""
    id: Int!
  ): LoginException
  loginExceptions(createdByUserId: Int, userId: Int): [LoginException!]
  managers: [User!]!
  menus: [Menus!]
  menuTags(
    """The Menu Id"""
    menuId: Int!
  ): [Tag!]
  myCompanies: [Company!]!
  notification(id: Int!): Notification!
  notifications: [Notification!]!
  oldProcesses(clientId: Int): [OldProcess!]!
  oldProcessesForInstance(instanceId: Int!): [OldProcess!]!
  oldTask(id: Int!): OldTask
  oldTasks(filter: String, limit: Int, offset: Int, order: String): [OldTask!]!
  preset(
    """The Preset Id"""
    id: Int!
  ): Presets
  presets: [Presets!]
  process(bustCache: Boolean, id: Int!): Process!
  processCategoryTags(bustCache: Boolean): [Tag!]!
  processes(bustCache: Boolean, clientId: Int): [Process!]!
  qualifications: [Qualification!]!
  quote(id: Int!): Quote!
  role(id: Int!): Role!
  roles: [Role!]!
  skillTags(bustCache: Boolean): [Tag!]!
  stages: [Stage!]!
  standardProcessesTags(bustCache: Boolean): [Tag!]!
  statuses: [Status!]!
  statusUpdates(instanceId: Int!): [Comment!]!
  step(id: Int!): Step
  stepRun(bustCache: Boolean, id: Int!): StepRun!
  steps(processId: Int!): [Step!]
  stepTemplate(bustCache: Boolean, id: Int!): StepTemplate!
  stepTemplateCategories: [StepTemplateCategory!]
  stepTemplateCategory(id: Int!): StepTemplateCategory!
  stepTemplates(bustCache: Boolean): [StepTemplate!]!
  tag(id: Int!): Tag!
  tags(parentLabel: String): [Tag!]!
  taskRun(id: Int!): TaskRun
  taskRunByMapStepRunId(mapStepRunId: Int!): TaskRun
  taskRuns(filter: String, limit: Int, offset: Int, order: String): [TaskRun!]!
  teams: [Team!]!
  teamTags(bustCache: Boolean): [Tag!]!
  teramindHours(cycleEnd: String!, cycleStart: String!, userId: Int!): [Teramind!]! @deprecated(reason: "This field has been deprecated.")
  timeEntries(instanceId: Int!): [TimeEntry!]!
  toolTags(bustCache: Boolean): [Tag!]!
  user(id: Int!): User!
  userOldTasks(assigneeId: Int): [OldTask!]
  users(cycleRange: [String!], draftAgentInvoiceStatus: [String!], limit: Int, managerId: [Int!], offboarded: [Boolean!], offboardedAt: [Boolean!], offset: Int, team: [String!], userProfileName: String, userType: String): [User!]!
  usersToClientsAccess(clientId: Int): [UsersToClientsAccess!]!
  userTaskRuns(assigneeId: Int): [TaskRun!]
  validGoFromVariables(goToVariableId: Int!): [Variable!]
  variableTemplate(bustCache: Boolean, id: Int!): VariableTemplate
  variableTemplates: [VariableTemplate!]
  variableValue(id: Int!): VariableValue
  variableValueByStepRunAndInternalId(internalId: Int, stepRunId: Int!): VariableValue
  workStatuses(bustCache: Boolean, instanceId: Int!): [Comment!]!
  xeroInvoice(id: Int!): XeroInvoice!
  xeroInvoices(userId: Int!): [XeroInvoice!]!
}

type Question implements Node {
  """Answers"""
  answers: [Answer!]!
  createdAt: Date!

  """Form"""
  form: Form
  formId: Int

  """Unique identifier for the resource"""
  id: Int!
  position: Int

  """Question Category"""
  questionCategory: QuestionCategory!
  questionCategoryId: Int!
  text: String
  type: QuestionType!
}

type QuestionCategory implements Node {
  createdAt: Date!

  """Unique identifier for the resource"""
  id: Int!
  name: String!

  """Questions"""
  questions: [Question!]!
}

enum QuestionType {
  csat
  yes_no
}

type Quote implements Node {
  amountInCents: Int!
  email: Email!
  emailId: Int!
  grossMargin: Float!

  """Unique identifier for the resource"""
  id: Int!
  instance: Instance!
  instanceId: Int!
  lineItems: [LineItem!]!
}

input QuoteAttributesInputType {
  emailId: Int!
  instanceId: Int!
}

type Role implements Node {
  description: String
  emailPreference: RoleEmailPreference

  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

"""Whether the user in the given role should be BCC or CC on emails"""
enum RoleEmailPreference {
  BCC
  CC
}

type Shift {
  endOfCurrentShift: String
  onShift: Boolean!
  startOfNextShift: String
  timezone: String
}

type Stage implements Node {
  count: Int!

  """Unique identifier for the resource"""
  id: Int!
  name: StageName!
  statuses: [Status!]!
}

enum StageName {
  Delivering
  Done
  Operating
  QA
  Routing
  Scoping
}

type Status implements Node {
  descriptors: [Descriptor!]!

  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

type Step implements Node {
  allowRetry: Boolean!
  automationLevel: StepTemplateAutomationLevel!
  description: String
  duplicatedFrom: Step
  duplicatedFromId: Int
  duplicatedTo: [Step!]
  external: Boolean!
  goFromSteps: [Step!]
  goToSteps: [Step!]

  """Unique identifier for the resource"""
  id: Int!
  inputs: [Variable!]
  meta: JSON
  name: String!
  outputs: [Variable!]
  position: Int!
  process: Process!
  processId: Int!
  stepGoFroms: [StepGoTo!]
  stepGoTos: [StepGoTo!]
  stepRuns: [StepRun!]
  stepTemplate: StepTemplate!
  stepTemplateId: Int!
  synchronous: Boolean!
  task: Task
  taskId: Int
  uid: String!
  variables: [Variable!]
}

type StepGoTo implements Node {
  duplicatedFrom: StepGoTo
  duplicatedFromId: Int
  duplicatedTo: [StepGoTo!]
  goFromStep: Step!
  goFromStepId: Int!
  goToStep: Step!
  goToStepId: Int!

  """Unique identifier for the resource"""
  id: Int!
  ifBranch: Boolean
  processId: Int!
}

type StepRun implements Node {
  allowRetry: Boolean!
  automationLevel: StepTemplateAutomationLevel!
  description: String
  duplicatedFrom: StepRun
  duplicatedFromId: Int
  duplicatedTo: [StepRun!]!
  errorCode: String
  errorMessage: String
  executionStartedAt: Date
  executionStoppedAt: Date
  external: Boolean!
  goFromStepRuns: [StepRun!]!
  goToStepRuns: [StepRun!]

  """Unique identifier for the resource"""
  id: Int!
  inputs: [VariableValue!]
  isManual: Boolean!
  meta: JSON
  name: String!
  outputs: [VariableValue!]
  position: Int!
  processRun: ProcessRun!
  processRunId: Int!
  status: StepRunStatus!

  """Step can be null if the stepRun was generated by the instance itself"""
  step: Step
  stepId: Int
  stepRunGoTos: [StepRunGoTo!]!
  stepTemplate: StepTemplate!
  stepTemplateId: Int!
  synchronous: Boolean!
  taskRun: TaskRun
  taskRunId: Int
  uid: String!
  variableValues: [VariableValue!]
}

type StepRunGoTo implements Node {
  duplicatedFrom: StepRunGoTo
  duplicatedFromId: Int
  duplicatedTo: [StepRunGoTo!]!
  goFromStepRun: StepRun!
  goFromStepRunId: Int!
  goToStepRun: StepRun!
  goToStepRunId: Int!

  """Unique identifier for the resource"""
  id: Int!
  ifBranch: Boolean
  processRun: ProcessRun!
  processRunId: Int!
}

enum StepRunStatus {
  disabled
  done
  failed
  pending
  queued
  running
}

type StepTemplate implements Node {
  allowRetry: Boolean!
  automationLevel: StepTemplateAutomationLevel!
  description: String
  duplicatedFrom: StepTemplate
  duplicatedFromId: Int
  duplicatedTo: [StepTemplate!]
  external: Boolean!

  """Unique identifier for the resource"""
  id: Int!
  inputs: [VariableTemplate!]
  meta: JSON
  name: String!
  outputs: [VariableTemplate!]
  status: StepTemplateStatus!
  stepRuns: [StepRun!]
  steps: [Step!]
  stepTemplateCategory: StepTemplateCategory
  stepTemplateCategoryId: Int!
  synchronous: Boolean!
  uid: String!
  variableTemplates: [VariableTemplate!]
}

enum StepTemplateAutomationLevel {
  full
  manual
  semi
}

type StepTemplateCategory implements Node {
  description: String

  """Unique identifier for the resource"""
  id: Int!
  name: String!
  stepTemplates: [StepTemplate!]
}

enum StepTemplateStatus {
  draft
  hidden
  published
}

type StripeInvoice {
  date: String
  downloadUrl: String
  id: String
  number: String
  status: String
  total: Float
}

type Subscription {
  amount: Int
  billingCycleAnchor: String
  cancelledAt: String
  card: Card
  intervalCount: Int
  periodEnd: String
  planId: String
  rate: Int
  status: String
  type: String
}

type Tag implements Node {
  clients: [Client!]
  color: String
  iconUrl: String

  """Unique identifier for the resource"""
  id: Int!
  instances: [Instance!]
  label: String!
  parent: Tag
  parentId: Int

  """Processes that have this tag"""
  processes: [Process!]
  tagToClients: [TagToClient!]
  tagToInstances: [TagToInstance!]
  tagToProcesses: [TagToProcess!]
  tagToUsers: [TagToUser!]
  users: [User!]
}

type TagToClient {
  client: Client!
  clientId: Int!
  credentialStatus: String
  tag: Tag!
  tagId: Int!
  updatedAt: Date!
}

type TagToInstance {
  instance: Instance!
  instanceId: Int!
  rank: Int!
  tag: Tag!
  tagId: Int!
  updatedAt: Date!
}

type TagToProcess {
  process: Process!
  processId: Int!
  rank: String
  tag: Tag!
  tagId: Int!
}

type TagToUser {
  rank: Int!
  tag: Tag!
  tagId: Int!
  updatedAt: Date!
  user: User!
  userId: Int!
}

type Task implements Node {
  """benchmark as an iso string"""
  benchmark: Duration

  """benchmark as a float number of hours"""
  benchmarkHours: Float
  description: String
  duplicatedFrom: Task
  duplicatedFromId: Int
  duplicatedTo: [Task!]

  """Unique identifier for the resource"""
  id: Int!
  inputs: [Variable!]
  isMap: Boolean!

  """The input from the map step, if the task is a map"""
  mapInputVariable: Variable
  mapInputVariableId: Int

  """The map step at the start, if the task is a map"""
  mapStep: Step
  mapStepId: Int
  name: String!
  outputs: [Variable!]
  position: Int!
  process: Process!
  processId: Int!

  """qaBenchmark as an iso string"""
  qaBenchmark: Duration
  status: TaskStatus!
  steps: [Step!]
  taskDeliverables: [TaskDeliverable!]
  taskRuns: [TaskRun!]
  uid: String!
  variables: [Variable!]
}

type TaskDeliverable implements Node {
  commodity: Commodity!
  commodityId: Int!

  """Unique identifier for the resource"""
  id: Int!
  quantityRequired: Int!
  task: Task!
  taskId: Int!
}

"""An assignable set of stepRuns"""
type TaskRun implements Node {
  """Agent who is assigned to this taskRun."""
  assignee: User
  assigneeId: Int
  batchifiedFrom: TaskRun
  batchifiedFromId: Int
  batchifiedTo: [TaskRun!]

  """benchmark as an iso string"""
  benchmark: Duration

  """benchmark as a float number of hours"""
  benchmarkHours: Float
  createdAt: Date!
  deadline: Date
  description(sanitize: Boolean): String
  duplicatedFrom: TaskRun
  duplicatedFromId: Int
  duplicatedTo: [TaskRun!]

  """Unique identifier for the resource"""
  id: Int!
  inputs: [VariableValue!]
  isCurrentlyBeingTrackedIn: Boolean!
  isMap: Boolean!

  """The input from the map step, if the task is a map"""
  mapInputVariableValue: VariableValue
  mapInputVariableValueId: Int

  """The map stepRun at the start, if the task is a map"""
  mapStepRun: StepRun
  mapStepRunId: Int
  name: String!
  outputs: [VariableValue!]
  position: Int!
  processRun: ProcessRun!
  processRunId: Int!

  """Agent who is assigned to QA this taskRun."""
  qaAssignee: User
  qaAssigneeId: Int

  """benchmark as an iso string"""
  qaBenchmark: Duration

  """qaBenchmark as a float number of hours"""
  qaBenchmarkHours: Float
  qaComplete: Boolean!
  qaFormSubmission: String
  qaPass: Boolean!
  qaScore: Int
  qaTimeTracked: BigInt!
  status: TaskRunStatus!
  stepRuns: [StepRun!]
  task: Task
  taskId: Int
  taskRunDeliverables: [TaskRunDeliverable!]
  timeEntries: [TimeEntry!]
  totalTimeTracked: BigInt!
  uid: String!
  variableValues: [VariableValue!]
}

type TaskRunDeliverable implements Node {
  commodity: Commodity!
  commodityId: Int!

  """Unique identifier for the resource"""
  id: Int!
  quantityApproved: Int!
  quantityCompleted: Int!
  quantityPaid: Int!
  quantityRequired: Int!
  taskRun: TaskRun!
  taskRunId: Int!
}

enum TaskRunStatus {
  done
  operating
  pending
  qa
}

enum TaskStatus {
  draft
  published
}

type TaskValidation {
  errors: [TaskValidationError!]
  valid: Boolean!
}

type TaskValidationError {
  message: String!
  processIds: [Int!]
  stepGoTos: [StepGoTo!]
  stepIds: [Int!]
  steps: [Step!]
}

type Team implements Node {
  """Unique identifier for the resource"""
  id: Int!
  name: String!
}

type Teramind implements Node {
  duration: String!
  email: String!

  """Unique identifier for the resource"""
  id: Int!
  startDate: Date!
}

"""Assistant Tier"""
enum Tier {
  Standard
  VIP
}

type TimeEntry implements Node {
  """draftAgentInvoice associated with this timeEntry"""
  draftAgentInvoice: DraftAgentInvoice
  draftAgentInvoiceId: Int
  duration: String!

  """Unique identifier for the resource"""
  id: Int!

  """Instance where time was tracked."""
  instance: Instance!
  instanceId: Int!

  """oldTask associated with this timeEntry"""
  oldTask: OldTask
  oldTaskId: Int
  startedAt: Date!
  stoppedAt: Date

  """taskRun associated with this timeEntry"""
  taskRun: TaskRun
  taskRunId: Int
  type: TimeEntryType!

  """User that tracked time."""
  user: User
  userId: Int!
}

"""Time Entry Type"""
enum TimeEntryType {
  general
  management
  qa
  scoping
}

type TransferWisePayment implements Node {
  """Unique identifier for the resource"""
  id: Int!
  lastTransferWiseStatusUpdate: TransferWiseStatusUpdate
}

type TransferWiseStatusUpdate implements Node {
  currentState: String!

  """Unique identifier for the resource"""
  id: Int!
  occurredAt: Date!
}

type Usage {
  amount: Int!
  from: Date!
  to: Date!
}

type User implements Node {
  activeTimeEntry: TimeEntry
  category: String!
  currency: String
  draftAgentInvoiceForCycle(cycleRange: [String!]!): DraftAgentInvoice

  """Events that agent has on its calendar"""
  events(endDate: String): [CalendarEvent!]!

  """Unique identifier for the resource"""
  id: Int!
  isTrackingNow: Boolean!
  lastActivity: Date
  linkedIn: String
  locationPlusCode: String
  manager: User
  managerId: Int
  offboarded: Boolean! @deprecated(reason: "replaced with offboardedAt field.")
  offboardedAt: Date
  oldTasks: [OldTask!]
  pay: Int
  paymentId: String
  paymentMeta: JSON
  paymentName: String
  paymentPlatform: String
  profile: Profile
  profileId: Int
  qaPassedPercentage: Float
  qaScore: Float

  """Agent shift related data"""
  shift: Shift
  startDate: Date
  status: String

  """Capability tags"""
  tags: [Tag!]
  tagToUsers: [TagToUser!]!
  taskRuns: [TaskRun!]
  team: String
  timeEntries: [TimeEntry!]!
  timezone: String
  totalTimeTracked: BigInt!
  workspaceComputerName: String
  workspaceComputerRegion: String
}

type UsersToClientsAccess implements Node {
  client: Client
  clientId: Int!

  """Unique identifier for the resource"""
  id: Int!
  role: Role
  roleId: Int
  user: User
  userId: Int!
}

type Variable implements Node {
  defaultValue: String
  description: String
  direction: VariableDirection!
  duplicatedFrom: Variable
  duplicatedFromId: Int
  duplicatedTo: [Variable!]
  goFromVariables: [Variable!]
  goToVariables: [Variable!]

  """Unique identifier for the resource"""
  id: Int!
  internalId: Int!
  keyName: String
  meta: JSON
  name: String!
  process: Process!
  processId: Int!
  required: Boolean!
  sampleData: JSON
  schema: JSON
  stage: Stage!
  stageId: Int
  step: Step
  stepId: Int
  task: Task
  taskId: Int
  type: VariableType!
  uid: String!
  variableGoFroms: [VariableGoTo!]
  variableGoTos: [VariableGoTo!]
  variableTemplate: VariableTemplate
  variableTemplateId: Int
  variableValues: [VariableValue!]
}

enum VariableDirection {
  input
  output
}

type VariableGoTo implements Node {
  duplicatedFrom: VariableGoTo
  duplicatedFromId: Int
  duplicatedTo: [VariableGoTo!]
  fromField: String
  goFromVariable: Variable!
  goFromVariableId: Int!
  goToVariable: Variable!
  goToVariableId: Int!

  """Unique identifier for the resource"""
  id: Int!
  process: Process!
  processId: Int!
  toField: String
}

type VariableTemplate implements Node {
  defaultValue: String
  description: String
  direction: VariableDirection!
  duplicatedFrom: VariableTemplate
  duplicatedFromId: Int
  duplicatedTo: [VariableTemplate!]

  """Unique identifier for the resource"""
  id: Int!
  internalId: Int!
  keyName: String
  meta: JSON
  name: String!
  required: Boolean!
  sampleData: JSON
  schema: JSON
  stage: Stage!
  stageId: Int
  stepTemplate: StepTemplate!
  stepTemplateId: Int!
  type: VariableType!
  uid: String!
  variables: [Variable!]
  variableValues: [VariableValue!]
}

enum VariableType {
  a_a_any
  a_a_object
  a_a_string
  a_any
  a_boolean
  a_datetime
  a_duration
  a_email
  a_enum
  a_html
  a_number
  a_object
  a_string
  a_url
  any
  boolean
  datetime
  duration
  email
  enum
  html
  number
  object
  string
  url
}

type VariableValue implements Node {
  defaultValue: String
  description: String
  direction: VariableDirection!
  duplicatedFrom: VariableValue
  duplicatedFromId: Int
  duplicatedTo: [VariableValue!]
  goFromVariableValues: [VariableValue!]
  goToVariableValues: [VariableValue!]

  """Unique identifier for the resource"""
  id: Int!
  internalId: Int!
  keyName: String
  meta: JSON
  name: String!
  parsedValue: JSON
  processRun: ProcessRun
  processRunId: Int!
  required: Boolean!
  sampleData: JSON
  schema: JSON
  stage: Stage!
  stageId: Int
  stepRun: StepRun
  stepRunId: Int
  taskRun: TaskRun
  taskRunId: Int
  type: VariableType!
  uid: String!
  value: String
  variable: Variable
  variableId: Int
  variableTemplate: VariableTemplate
  variableTemplateId: Int
  variableValueGoFroms: [VariableValueGoTo!]
  variableValueGoTos: [VariableValueGoTo!]
}

type VariableValueGoTo implements Node {
  duplicatedFrom: VariableValueGoTo
  duplicatedFromId: Int
  duplicatedTo: [VariableValueGoTo!]
  fromField: String
  goFromVariableValue: VariableValue!
  goFromVariableValueId: Int!
  goToVariableValue: VariableValue!
  goToVariableValueId: Int!

  """Unique identifier for the resource"""
  id: Int!
  processRun: ProcessRun!
  processRunId: Int!
  toField: String
}

type XeroInvoice implements Node {
  contactEmail: String
  contactName: String
  createdAt: Date!
  draftAgentInvoice: DraftAgentInvoice
  dueDate: String

  """Unique identifier for the resource"""
  id: Int!
  invoiceId: String!
  lastTransferWisePayment: TransferWisePayment
  status: String!
  timeEntries: [TimeEntry!]
  total: String!
}
